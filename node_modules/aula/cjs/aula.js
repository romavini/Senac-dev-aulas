"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _AXR = _interopRequireDefault(require("./AXR"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var AulaFunc =
  /*#__PURE__*/
  (function() {
    function AulaFunc(tunnel) {
      _classCallCheck(this, AulaFunc);

      this.tunnel = tunnel;
    }
    /**
     * Create Media
     * Create media
     * @async
     * @param body
     * @param {object} body.media
     * @returns {Promise<{media: object}>}
     */

    _createClass(AulaFunc, [
      {
        key: "mediaCreate",
        value: function mediaCreate(body) {
          return (0, _AXR.default)(this.tunnel, "mediaCreate", {}, body);
        }
        /**
         * Get Media
         * Get media
         * @async
         * @param body
         * @param {string} body.media_id
         * @returns {Promise<{media: object}>}
         */
      },
      {
        key: "mediaGet",
        value: function mediaGet(body) {
          return (0, _AXR.default)(this.tunnel, "mediaGet", {}, body);
        }
        /**
         * Upload Media
         * Upload media
         * @async
         * @param body
         * @param {string} body.media_id
         * @returns {Promise<{media: object}>}
         */
      },
      {
        key: "mediaUpload",
        value: function mediaUpload(body) {
          return (0, _AXR.default)(this.tunnel, "mediaUpload", {}, body);
        }
        /**
         * Delete Media
         * Delete media
         * @async
         * @param body
         * @param {string} body.media_id
         * @returns {Promise<{media: object}>}
         */
      },
      {
        key: "mediaDelete",
        value: function mediaDelete(body) {
          return (0, _AXR.default)(this.tunnel, "mediaDelete", {}, body);
        }
        /**
         * Create Article
         * Create article
         * @async
         * @param body
         * @param {object} body.article
         * @returns {Promise<{article: object}>}
         */
      },
      {
        key: "articleCreate",
        value: function articleCreate(body) {
          return (0, _AXR.default)(this.tunnel, "articleCreate", {}, body);
        }
        /**
         * Search Articles
         * All Search requests have caching mechanism, don't expect changes to take immediate effect. Search server for articles. :server_id is path parameter, the rest are query parameters. Will fit the requirements of frontend __windowing__
         * @async
         * @param loc
         * @param {string} loc.user_id
         * @param {string} loc.server_id
         * @param {string} loc.owner_user_id
         * @param {string} loc.collection_id
         * @param {string} loc.lang
         * @param {Array} loc.tags
         * @param {string} loc.type
         * @param {string} loc.sort
         * @param {integer} loc.from
         * @param {integer} loc.to
         * @returns {Promise<{total: integer, results: Array}>}
         */
      },
      {
        key: "articleSearch",
        value: function articleSearch(loc) {
          return (0, _AXR.default)(this.tunnel, "articleSearch", loc);
        }
        /**
         * Get Article
         * Get article
         * @async
         * @param loc
         * @param {string} loc.article_id
         * @param {boolean} loc.overview
         * @param {string} loc.lang_ids
         * @returns {Promise<{article: object}>}
         */
      },
      {
        key: "articleGet",
        value: function articleGet(loc) {
          return (0, _AXR.default)(this.tunnel, "articleGet", loc);
        }
        /**
         * Modify Article
         * Modify article. Permissions required depend on the fields changed
         * @async
         * @param loc
         * @param {string} loc.article_id
         * @param body
         * @param {object} body.article
         * @returns {Promise<{article: object}>}
         */
      },
      {
        key: "articleModify",
        value: function articleModify(loc, body) {
          return (0, _AXR.default)(this.tunnel, "articleModify", loc, body);
        }
        /**
         * Delete Article
         * Delete article.
         * @async
         * @param loc
         * @param {string} loc.article_id
         * @returns {Promise<{article: object}>}
         */
      },
      {
        key: "articleDelete",
        value: function articleDelete(loc) {
          return (0, _AXR.default)(this.tunnel, "articleDelete", loc);
        }
        /**
         * Rate Article
         * Rate article
         * @async
         * @param loc
         * @param {string} loc.article_id
         * @param body
         * @param {boolean} body.positive
         * @returns {Promise<{article_id: string, rating: string}>}
         */
      },
      {
        key: "articleRate",
        value: function articleRate(loc, body) {
          return (0, _AXR.default)(this.tunnel, "articleRate", loc, body);
        }
        /**
         * Prune Article
         * Prune article - Remove deleted segments
         * @async
         * @param loc
         * @param {string} loc.article_id
         * @returns {Promise<{article: object, segments: Array}>}
         */
      },
      {
        key: "articlePrune",
        value: function articlePrune(loc) {
          return (0, _AXR.default)(this.tunnel, "articlePrune", loc);
        }
        /**
         * Create Article Segment
         * Create segment
         * @async
         * @param loc
         * @param {string} loc.article_id
         * @param {string} loc.seg_id
         * @param body
         * @param {Array} body.segments
         * @returns {Promise<{segments: Array}>}
         */
      },
      {
        key: "articleSegmentCreate",
        value: function articleSegmentCreate(loc, body) {
          return (0, _AXR.default)(
            this.tunnel,
            "articleSegmentCreate",
            loc,
            body
          );
        }
        /**
         * Modify Article Segment
         * Modify segment
         * @async
         * @param loc
         * @param {string} loc.article_id
         * @param {string} loc.seg_id
         * @param body
         * @param {object} body.segment
         * @returns {Promise<{segments: Array}>}
         */
      },
      {
        key: "articleSegmentModify",
        value: function articleSegmentModify(loc, body) {
          return (0, _AXR.default)(
            this.tunnel,
            "articleSegmentModify",
            loc,
            body
          );
        }
        /**
         * Delete Article Segment
         * Delete segment
         * @async
         * @param loc
         * @param {string} loc.article_id
         * @param {string} loc.seg_id
         * @returns {Promise<{segments: object}>}
         */
      },
      {
        key: "articleSegmentDelete",
        value: function articleSegmentDelete(loc) {
          return (0, _AXR.default)(this.tunnel, "articleSegmentDelete", loc);
        }
        /**
         * Create Post
         * Create post
         * @async
         * @param body
         * @param {object} body.post
         * @returns {Promise<{post: object}>}
         */
      },
      {
        key: "postCreate",
        value: function postCreate(body) {
          return (0, _AXR.default)(this.tunnel, "postCreate", {}, body);
        }
        /**
         * Rate Post
         * Rate post
         * @async
         * @param loc
         * @param {string} loc.post_id
         * @param body
         * @param {string} body.vote
         * @returns {Promise<{rating: integer}>}
         */
      },
      {
        key: "postRate",
        value: function postRate(loc, body) {
          return (0, _AXR.default)(this.tunnel, "postRate", loc, body);
        }
        /**
         * Get Post
         * Get post
         * @async
         * @param loc
         * @param {string} loc.post_id
         * @param {boolean} loc.overview
         * @param {string} loc.lang_ids
         * @returns {Promise<{post: object}>}
         */
      },
      {
        key: "postGet",
        value: function postGet(loc) {
          return (0, _AXR.default)(this.tunnel, "postGet", loc);
        }
        /**
         * Get Post Subposts
         * Get post subposts
         * @async
         * @returns {Promise<{}>}
         */
      },
      {
        key: "postSubpostsGet",
        value: function postSubpostsGet() {
          return (0, _AXR.default)(this.tunnel, "postSubpostsGet", {});
        }
        /**
         * Create Server
         * Create new server
         * @async
         * @param body
         * @param {object} body.server
         * @returns {Promise<{server: object}>}
         */
      },
      {
        key: "serverCreate",
        value: function serverCreate(body) {
          return (0, _AXR.default)(this.tunnel, "serverCreate", {}, body);
        }
        /**
         * Get Server
         * Get server
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {boolean} loc.overview
         * @returns {Promise<{server: object}>}
         */
      },
      {
        key: "serverGet",
        value: function serverGet(loc) {
          return (0, _AXR.default)(this.tunnel, "serverGet", loc);
        }
        /**
         * Modify Server
         * Modify server info
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param body
         * @param {object} body.server
         * @returns {Promise<{server: object}>}
         */
      },
      {
        key: "serverModify",
        value: function serverModify(loc, body) {
          return (0, _AXR.default)(this.tunnel, "serverModify", loc, body);
        }
        /**
         * Delete Server
         * Delete server
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @returns {Promise<{server: object}>}
         */
      },
      {
        key: "serverDelete",
        value: function serverDelete(loc) {
          return (0, _AXR.default)(this.tunnel, "serverDelete", loc);
        }
        /**
         * Get Server User Permissions
         * Get user permissions for server
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.user_id
         * @param {Array} loc.collection_ids
         * @returns {Promise<{collections: object}>}
         */
      },
      {
        key: "serverUserPermissionsGet",
        value: function serverUserPermissionsGet(loc) {
          return (0, _AXR.default)(
            this.tunnel,
            "serverUserPermissionsGet",
            loc
          );
        }
        /**
         * Get Server User
         * Get server user info by user id
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.user_id
         * @returns {Promise<{user: object}>}
         */
      },
      {
        key: "serverUserGet",
        value: function serverUserGet(loc) {
          return (0, _AXR.default)(this.tunnel, "serverUserGet", loc);
        }
        /**
         * Modify Server User
         * Modify server user
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.user_id
         * @param body
         * @param {object} body.user
         * @returns {Promise<{user: object}>}
         */
      },
      {
        key: "serverUserModify",
        value: function serverUserModify(loc, body) {
          return (0, _AXR.default)(this.tunnel, "serverUserModify", loc, body);
        }
        /**
         * Search Server Users
         * All Search requests have caching mechanism, don't expect changes to take immediate effect.  Search server users. Will fit the requirements of frontend __windowing__
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.role_id
         * @param {string} loc.search
         * @param {string} loc.sort
         * @param {integer} loc.from
         * @param {integer} loc.to
         * @returns {Promise<{total: integer, users: Array}>}
         */
      },
      {
        key: "serverUserSearch",
        value: function serverUserSearch(loc) {
          return (0, _AXR.default)(this.tunnel, "serverUserSearch", loc);
        }
        /**
         * Search Server User Bans
         * All Search requests have caching mechanism, don't expect changes to take immediate effect. Get banned user by idx in banned list. For the purposes of frontend __windowing__
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {integer} loc.from
         * @param {integer} loc.to
         * @returns {Promise<{total: integer, users: Array}>}
         */
      },
      {
        key: "serverUserBanSearch",
        value: function serverUserBanSearch(loc) {
          return (0, _AXR.default)(this.tunnel, "serverUserBanSearch", loc);
        }
        /**
         * Search Server Invites
         * Search server invites __windowing__
         * @async
         * @returns {Promise<{}>}
         */
      },
      {
        key: "serverInviteSearch",
        value: function serverInviteSearch() {
          return (0, _AXR.default)(this.tunnel, "serverInviteSearch", {});
        }
        /**
         * Put Server User Ban
         * Ban user
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.user_id
         * @returns {Promise<{total_bans: integer, user: object}>}
         */
      },
      {
        key: "serverUserBanPut",
        value: function serverUserBanPut(loc) {
          return (0, _AXR.default)(this.tunnel, "serverUserBanPut", loc);
        }
        /**
         * Delete Server User Ban
         * Remove user ban
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.user_id
         * @returns {Promise<{user: object}>}
         */
      },
      {
        key: "serverUserBanDelete",
        value: function serverUserBanDelete(loc) {
          return (0, _AXR.default)(this.tunnel, "serverUserBanDelete", loc);
        }
        /**
         * Add Server User
         * User join server
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.user_id
         * @param {string} loc.code
         * @returns {Promise<{user: object}>}
         */
      },
      {
        key: "serverUserAdd",
        value: function serverUserAdd(loc) {
          return (0, _AXR.default)(this.tunnel, "serverUserAdd", loc);
        }
        /**
         * Remove Server User
         * User leaves server
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.user_id
         * @returns {Promise<{user: object}>}
         */
      },
      {
        key: "serverUserRemove",
        value: function serverUserRemove(loc) {
          return (0, _AXR.default)(this.tunnel, "serverUserRemove", loc);
        }
        /**
         * Put Server User Role
         * User is assigned to server role
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.user_id
         * @param {string} loc.role_id
         * @returns {Promise<{user: object}>}
         */
      },
      {
        key: "serverUserRolePut",
        value: function serverUserRolePut(loc) {
          return (0, _AXR.default)(this.tunnel, "serverUserRolePut", loc);
        }
        /**
         * Delete Server User Role
         * User is dismissed from server role
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.user_id
         * @param {string} loc.role_id
         * @returns {Promise<{user: object}>}
         */
      },
      {
        key: "serverUserRoleDelete",
        value: function serverUserRoleDelete(loc) {
          return (0, _AXR.default)(this.tunnel, "serverUserRoleDelete", loc);
        }
        /**
         * Create Server Game
         * Create game
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param body
         * @param {object} body.game
         * @returns {Promise<{game: object}>}
         */
      },
      {
        key: "serverGameCreate",
        value: function serverGameCreate(loc, body) {
          return (0, _AXR.default)(this.tunnel, "serverGameCreate", loc, body);
        }
        /**
         * Modify Server Game
         * Modify game
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.game_id
         * @param body
         * @param {object} body.game
         * @returns {Promise<{game: object}>}
         */
      },
      {
        key: "serverGameModify",
        value: function serverGameModify(loc, body) {
          return (0, _AXR.default)(this.tunnel, "serverGameModify", loc, body);
        }
        /**
         * Delete Server Game
         * Delete game
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.game_id
         * @returns {Promise<{game: object}>}
         */
      },
      {
        key: "serverGameDelete",
        value: function serverGameDelete(loc) {
          return (0, _AXR.default)(this.tunnel, "serverGameDelete", loc);
        }
        /**
         * Get Server Game
         * Get gameinfo
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.game_id
         * @returns {Promise<{game: object}>}
         */
      },
      {
        key: "serverGameGet",
        value: function serverGameGet(loc) {
          return (0, _AXR.default)(this.tunnel, "serverGameGet", loc);
        }
        /**
         * Search Server Games
         * All Search requests have caching mechanism, don't expect changes to take immediate effect. Get gameinfo
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {integer} loc.from
         * @param {integer} loc.to
         * @returns {Promise<{total: integer, games: Array}>}
         */
      },
      {
        key: "serverGameSearch",
        value: function serverGameSearch(loc) {
          return (0, _AXR.default)(this.tunnel, "serverGameSearch", loc);
        }
        /**
         * Create Server Item
         * Create item
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param body
         * @param {object} body.item
         * @returns {Promise<{item: object}>}
         */
      },
      {
        key: "serverItemCreate",
        value: function serverItemCreate(loc, body) {
          return (0, _AXR.default)(this.tunnel, "serverItemCreate", loc, body);
        }
        /**
         * Modify Server Item
         * Modify item
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.item_id
         * @param body
         * @param {object} body.item
         * @returns {Promise<{item: object}>}
         */
      },
      {
        key: "serverItemModify",
        value: function serverItemModify(loc, body) {
          return (0, _AXR.default)(this.tunnel, "serverItemModify", loc, body);
        }
        /**
         * Delete Server Item
         * Delete item
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.item_id
         * @returns {Promise<{item: object}>}
         */
      },
      {
        key: "serverItemDelete",
        value: function serverItemDelete(loc) {
          return (0, _AXR.default)(this.tunnel, "serverItemDelete", loc);
        }
        /**
         * Get Server Item
         * Get item info
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.item_id
         * @returns {Promise<{item: object}>}
         */
      },
      {
        key: "serverItemGet",
        value: function serverItemGet(loc) {
          return (0, _AXR.default)(this.tunnel, "serverItemGet", loc);
        }
        /**
         * Search Server Items
         * All Search requests have caching mechanism, don't expect changes to take immediate effect. Get item info
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {integer} loc.from
         * @param {integer} loc.to
         * @returns {Promise<{total: integer, items: Array}>}
         */
      },
      {
        key: "serverItemSearch",
        value: function serverItemSearch(loc) {
          return (0, _AXR.default)(this.tunnel, "serverItemSearch", loc);
        }
        /**
         * Create Server Invite
         * Create invite code for a server
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param body
         * @param {object} body.invite
         * @returns {Promise<{invite: object}>}
         */
      },
      {
        key: "serverInviteCreate",
        value: function serverInviteCreate(loc, body) {
          return (0, _AXR.default)(
            this.tunnel,
            "serverInviteCreate",
            loc,
            body
          );
        }
        /**
         * Modify Server Invite
         * Modify uses or expires
         * @async
         * @returns {Promise<{}>}
         */
      },
      {
        key: "serverInviteModify",
        value: function serverInviteModify() {
          return (0, _AXR.default)(this.tunnel, "serverInviteModify", {});
        }
        /**
         * Delete Server Invite
         * Delete invite for a server
         * @async
         * @param loc
         * @param {string} loc.invite_id
         * @param {string} loc.server_id
         * @returns {Promise<{invite: object}>}
         */
      },
      {
        key: "serverInviteDelete",
        value: function serverInviteDelete(loc) {
          return (0, _AXR.default)(this.tunnel, "serverInviteDelete", loc);
        }
        /**
         * Get Server Invite
         * Get invite code info
         * @async
         * @param loc
         * @param {string} loc.code
         * @returns {Promise<{invite: object}>}
         */
      },
      {
        key: "serverInviteGet",
        value: function serverInviteGet(loc) {
          return (0, _AXR.default)(this.tunnel, "serverInviteGet", loc);
        }
        /**
         * Create Server Collection
         * Create server collection
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param body
         * @param {object} body.collection
         * @returns {Promise<{collection: object}>}
         */
      },
      {
        key: "serverCollectionCreate",
        value: function serverCollectionCreate(loc, body) {
          return (0, _AXR.default)(
            this.tunnel,
            "serverCollectionCreate",
            loc,
            body
          );
        }
        /**
         * Add Server Collection Articles
         * Add articles to a server collection
         * @async
         * @returns {Promise<{}>}
         */
      },
      {
        key: "serverCollectionArticleAdd",
        value: function serverCollectionArticleAdd() {
          return (0, _AXR.default)(
            this.tunnel,
            "serverCollectionArticleAdd",
            {}
          );
        }
        /**
         * Remove Server Collection Articles
         * Remove articles from a server collection
         * @async
         * @returns {Promise<{}>}
         */
      },
      {
        key: "serverCollectionArticleRemove",
        value: function serverCollectionArticleRemove() {
          return (0, _AXR.default)(
            this.tunnel,
            "serverCollectionArticleRemove",
            {}
          );
        }
        /**
         * Modify Server Collection
         * Modify server collection
         * @async
         * @returns {Promise<{}>}
         */
      },
      {
        key: "serverCollectionModify",
        value: function serverCollectionModify() {
          return (0, _AXR.default)(this.tunnel, "serverCollectionModify", {});
        }
        /**
         * Modify Server Category
         * Modify server category
         * @async
         * @returns {Promise<{}>}
         */
      },
      {
        key: "serverCategoryModify",
        value: function serverCategoryModify() {
          return (0, _AXR.default)(this.tunnel, "serverCategoryModify", {});
        }
        /**
         * Get Collection
         * Get server collection info
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.collection_id
         * @returns {Promise<{collection: object}>}
         */
      },
      {
        key: "serverCollectionGet",
        value: function serverCollectionGet(loc) {
          return (0, _AXR.default)(this.tunnel, "serverCollectionGet", loc);
        }
        /**
         * Create Server Category
         * Create server category
         * @async
         * @returns {Promise<{}>}
         */
      },
      {
        key: "serverCategoryCreate",
        value: function serverCategoryCreate() {
          return (0, _AXR.default)(this.tunnel, "serverCategoryCreate", {});
        }
        /**
         * Get Category
         * Get server category info
         * @async
         * @returns {Promise<{}>}
         */
      },
      {
        key: "serverCategoryGet",
        value: function serverCategoryGet() {
          return (0, _AXR.default)(this.tunnel, "serverCategoryGet", {});
        }
        /**
         * Get All Server Categories
         * Get server categories
         * @async
         * @returns {Promise<{}>}
         */
      },
      {
        key: "serverCategoriesGet",
        value: function serverCategoriesGet() {
          return (0, _AXR.default)(this.tunnel, "serverCategoriesGet", {});
        }
        /**
         * Delete Server Category
         * Delete server category
         * @async
         * @returns {Promise<{}>}
         */
      },
      {
        key: "serverCategoryDelete",
        value: function serverCategoryDelete() {
          return (0, _AXR.default)(this.tunnel, "serverCategoryDelete", {});
        }
        /**
         * Move Category
         * Reorder categories
         * @async
         * @returns {Promise<{}>}
         */
      },
      {
        key: "serverCategoryMove",
        value: function serverCategoryMove() {
          return (0, _AXR.default)(this.tunnel, "serverCategoryMove", {});
        }
        /**
         * Move Collection
         * Move between categories and reorder collections
         * @async
         * @returns {Promise<{}>}
         */
      },
      {
        key: "serverCollectionMove",
        value: function serverCollectionMove() {
          return (0, _AXR.default)(this.tunnel, "serverCollectionMove", {});
        }
        /**
         * Delete Server Collection
         * Delete server collection
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.collection_id
         * @returns {Promise<{collection: object}>}
         */
      },
      {
        key: "serverCollectionDelete",
        value: function serverCollectionDelete(loc) {
          return (0, _AXR.default)(this.tunnel, "serverCollectionDelete", loc);
        }
        /**
         * Get Server User Collections
         * Get server collections visible to user
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.user_id
         * @returns {Promise<{collections: object}>}
         */
      },
      {
        key: "serverUserCollectionsGet",
        value: function serverUserCollectionsGet(loc) {
          return (0, _AXR.default)(
            this.tunnel,
            "serverUserCollectionsGet",
            loc
          );
        }
        /**
         * Create Server Role
         * Create server role
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param body
         * @param {object} body.role
         * @returns {Promise<{role: object}>}
         */
      },
      {
        key: "serverRoleCreate",
        value: function serverRoleCreate(loc, body) {
          return (0, _AXR.default)(this.tunnel, "serverRoleCreate", loc, body);
        }
        /**
         * Get Server Role
         * Get serfer role
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.role_id
         * @returns {Promise<{role: object}>}
         */
      },
      {
        key: "serverRoleGet",
        value: function serverRoleGet(loc) {
          return (0, _AXR.default)(this.tunnel, "serverRoleGet", loc);
        }
        /**
         * Modify Server Role
         * Modify server role
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.role_id
         * @param body
         * @param {object} body.role
         * @returns {Promise<{role: object}>}
         */
      },
      {
        key: "serverRoleModify",
        value: function serverRoleModify(loc, body) {
          return (0, _AXR.default)(this.tunnel, "serverRoleModify", loc, body);
        }
        /**
         * Delete Server Role
         * Delete server role
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.role_id
         * @returns {Promise<{role: object}>}
         */
      },
      {
        key: "serverRoleDelete",
        value: function serverRoleDelete(loc) {
          return (0, _AXR.default)(this.tunnel, "serverRoleDelete", loc);
        }
        /**
         * Search Server Tags
         * Search server tags. Used in autocompleting search
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {string} loc.tags
         * @param {string} loc.search
         * @returns {Promise<{tags: Array}>}
         */
      },
      {
        key: "serverTagsSearch",
        value: function serverTagsSearch(loc) {
          return (0, _AXR.default)(this.tunnel, "serverTagsSearch", loc);
        }
        /**
         * Register User
         * Register new user
         * @async
         * @param body
         * @param {object} body.user
         * @returns {Promise<{user: object}>}
         */
      },
      {
        key: "userRegister",
        value: function userRegister(body) {
          return (0, _AXR.default)(this.tunnel, "userRegister", {}, body);
        }
        /**
         * Logout User
         * Logout user
         * @async
         * @param body
         * @param {string} body.user_id
         * @returns {Promise<{ok: boolean}>}
         */
      },
      {
        key: "userLogout",
        value: function userLogout(body) {
          return (0, _AXR.default)(this.tunnel, "userLogout", {}, body);
        }
        /**
         * Get User Servers
         * Get user servers
         * @async
         * @param loc
         * @param {string} loc.user_id
         * @returns {Promise<{servers: object}>}
         */
      },
      {
        key: "userServersGet",
        value: function userServersGet(loc) {
          return (0, _AXR.default)(this.tunnel, "userServersGet", loc);
        }
        /**
         * Authenticate Anonymous User
         * Authenticate anonymous users
         * @async
         * @param body
         * @returns {Promise<{user: object, version: string}>}
         */
      },
      {
        key: "userAuthenticateAnonymous",
        value: function userAuthenticateAnonymous(body) {
          return (0, _AXR.default)(
            this.tunnel,
            "userAuthenticateAnonymous",
            {},
            body
          );
        }
        /**
         * Authenticate User Token
         * Authenticate by providing token
         * @async
         * @param body
         * @param {string} body.token
         * @returns {Promise<{user: object, version: string}>}
         */
      },
      {
        key: "userAuthenticate",
        value: function userAuthenticate(body) {
          return (0, _AXR.default)(this.tunnel, "userAuthenticate", {}, body);
        }
        /**
         * Authenticate User Password
         * Authenticate user with password
         * @async
         * @param body
         * @param {string} body.email
         * @param {string} body.password
         * @param {object} body.social
         * @returns {Promise<{user: object, version: string}>}
         */
      },
      {
        key: "userAuthenticatePassword",
        value: function userAuthenticatePassword(body) {
          return (0, _AXR.default)(
            this.tunnel,
            "userAuthenticatePassword",
            {},
            body
          );
        }
        /**
         * Authenticate User Social
         * Register or Login new user with social network credentials
         * @async
         * @param body
         * @param {object} body.social
         * @returns {Promise<{user: object, version: string}>}
         */
      },
      {
        key: "userAuthenticateSocial",
        value: function userAuthenticateSocial(body) {
          return (0, _AXR.default)(
            this.tunnel,
            "userAuthenticateSocial",
            {},
            body
          );
        }
        /**
         * Modify User Preferences
         * Save user preferences
         * @async
         * @param loc
         * @param {string} loc.user_id
         * @param body
         * @param {object} body.preferences
         * @returns {Promise<{preferences: object}>}
         */
      },
      {
        key: "userPreferencesModify",
        value: function userPreferencesModify(loc, body) {
          return (0, _AXR.default)(
            this.tunnel,
            "userPreferencesModify",
            loc,
            body
          );
        }
        /**
         * Get User Preferences
         * Leave user preferences
         * @async
         * @param loc
         * @param {string} loc.user_id
         * @returns {Promise<{preferences: object}>}
         */
      },
      {
        key: "userPreferencesGet",
        value: function userPreferencesGet(loc) {
          return (0, _AXR.default)(this.tunnel, "userPreferencesGet", loc);
        }
        /**
         * Get User Overview
         * Get list of user overviews
         * @async
         * @param loc
         * @param {Array} loc.user_ids
         * @returns {Promise<{users: Array}>}
         */
      },
      {
        key: "userOverviewGet",
        value: function userOverviewGet(loc) {
          return (0, _AXR.default)(this.tunnel, "userOverviewGet", loc);
        }
        /**
         * Search Server Admin Log
         * All Search requests have caching mechanism, don't expect changes to take immediate effect. Search the administrative events logs
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @param {integer} loc.from
         * @param {integer} loc.to
         * @returns {Promise<{total: integer, events: Array}>}
         */
      },
      {
        key: "serverAdminLogSearch",
        value: function serverAdminLogSearch(loc) {
          return (0, _AXR.default)(this.tunnel, "serverAdminLogSearch", loc);
        }
        /**
         * Introduce User Email
         * Introduce user email and find out if they are already registred
         * @async
         * @param body
         * @param {string} body.email
         * @returns {Promise<{registered: boolean, user: object}>}
         */
      },
      {
        key: "userIntroduction",
        value: function userIntroduction(body) {
          return (0, _AXR.default)(this.tunnel, "userIntroduction", {}, body);
        }
        /**
         * Verify User Lost Pass Code
         * Check if lost password code is valid
         * @async
         * @param body
         * @param {string} body.email
         * @param {string} body.code
         * @returns {Promise<{ok: boolean}>}
         */
      },
      {
        key: "userVerifyLostPassCode",
        value: function userVerifyLostPassCode(body) {
          return (0, _AXR.default)(
            this.tunnel,
            "userVerifyLostPassCode",
            {},
            body
          );
        }
        /**
         * Change User Lost Pass
         * Change user lost password
         * @async
         * @param body
         * @param {string} body.email
         * @param {string} body.code
         * @param {string} body.password
         * @returns {Promise<{user: object, version: string}>}
         */
      },
      {
        key: "userChangeLostPass",
        value: function userChangeLostPass(body) {
          return (0, _AXR.default)(this.tunnel, "userChangeLostPass", {}, body);
        }
        /**
         * Get Changelog
         * Get changelog for a user
         * @async
         * @param body
         * @returns {Promise<{changelog: Array}>}
         */
      },
      {
        key: "userChangelogGet",
        value: function userChangelogGet(body) {
          return (0, _AXR.default)(this.tunnel, "userChangelogGet", {}, body);
        }
        /**
         * Dump Server
         * Dump server  database
         * @async
         * @param loc
         * @param {string} loc.server_id
         * @returns {Promise<{server: object}>}
         */
      },
      {
        key: "serverDump",
        value: function serverDump(loc) {
          return (0, _AXR.default)(this.tunnel, "serverDump", loc);
        }
      }
    ]);

    return AulaFunc;
  })();

var _default = AulaFunc;
exports.default = _default;
