"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _AulaFunc = _interopRequireDefault(require("./AulaFunc"));

var _socket = _interopRequireDefault(require("socket.io-client"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Aula
 *
 * @param {object} user
 * @param {boolean} tunnel_overwrite
 *
 * @returns {AulaFunc}
 */
var Aula = function Aula() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      user = _ref.user,
      _ref$host = _ref.host,
      host = _ref$host === void 0 ? process.env.API_HOST ? process.env.API_HOST : "localhost" : _ref$host,
      _ref$socket = _ref.socket,
      socket = _ref$socket === void 0 ? true : _ref$socket,
      tunnel_overwrite = _ref.tunnel_overwrite,
      _ref$ref_FormData = _ref.ref_FormData,
      ref_FormData = _ref$ref_FormData === void 0 ? FormData : _ref$ref_FormData,
      _ref$demo = _ref.demo,
      demo = _ref$demo === void 0 ? true : _ref$demo,
      _ref$ref_fetch = _ref.ref_fetch,
      ref_fetch = _ref$ref_fetch === void 0 ? fetch : _ref$ref_fetch;

  var tunnel = tunnel_overwrite ? tunnel_overwrite : {};
  var a = new _AulaFunc.default(tunnel);
  a.host = host;
  a.is_socket = socket;

  if (socket) {
    // setup socket
    a.connect = function () {
      return new Promise(function (resolve) {
        if (!tunnel.socket) tunnel.socket = _socket.default.connect("https://" + a.host, {
          "reconnection delay": 0,
          "reopen delay": 0,
          "force new connecion": true,
          transports: ["websocket"],
          //secure: true,
          rejectUnauthorized: false
        });

        tunnel.send = function (func, data) {
          if (demo) data.demo = true;
          return new Promise(function (resolve) {
            return tunnel.socket.emit(func[0], data, resolve);
          });
        };

        tunnel.socket.on("connect",
        /*#__PURE__*/
        _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee() {
          var resp, _resp;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!user) {
                    _context.next = 15;
                    break;
                  }

                  if (!user.token) {
                    _context.next = 7;
                    break;
                  }

                  _context.next = 4;
                  return a.userAuthenticate(user);

                case 4:
                  resp = _context.sent;
                  _context.next = 10;
                  break;

                case 7:
                  _context.next = 9;
                  return a.userAuthenticatePassword(user);

                case 9:
                  resp = _context.sent;

                case 10:
                  tunnel.user = _objectSpread({}, user, {
                    id: resp.user.id
                  });
                  a.id = resp.user.id;
                  resolve(tunnel.socket);
                  _context.next = 21;
                  break;

                case 15:
                  _context.next = 17;
                  return a.userAuthenticateAnonymous({});

                case 17:
                  _resp = _context.sent;
                  tunnel.user = {
                    id: _resp.user.id
                  };
                  a.id = _resp.user.id;
                  resolve(tunnel.socket);

                case 21:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        })));
        tunnel.socket.on("connect_error", function (err) {});
        tunnel.socket.on("connect_timeout", function (err) {});
        tunnel.socket.on("error", function (err) {});
      });
    };

    a.disconnect = function () {
      tunnel.socket.disconnect();
    };
  } else {
    //setup rest
    a.connect =
    /*#__PURE__*/
    _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee2() {
      var resp, _resp2, _resp3;

      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!user) {
                _context2.next = 12;
                break;
              }

              if (!user.token) {
                _context2.next = 7;
                break;
              }

              _context2.next = 4;
              return a.userAuthenticate(user);

            case 4:
              resp = _context2.sent;
              _context2.next = 10;
              break;

            case 7:
              _context2.next = 9;
              return a.userAuthenticatePassword(user);

            case 9:
              _resp2 = _context2.sent;

            case 10:
              _context2.next = 15;
              break;

            case 12:
              _context2.next = 14;
              return a.userAuthenticateAnonymous({});

            case 14:
              _resp3 = _context2.sent;

            case 15:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    a.disconnect = function () {};

    var loc_esc = function loc_esc(data) {
      if (Array.isArray(data)) return data.join(",");
      return data;
    };

    tunnel.send = function (func, data) {
      var extra = {
        headers: {},
        method: func[2]
      };
      if (demo) data.demo = true;
      var target_host = a.host;
      if (data.host) target_host = data.host; // host in the data can overwrite default host for fetch requests

      delete data.host;
      var token = tunnel.user ? tunnel.user.token : user ? user.token : false;
      if (token) extra.headers.Authorization = "Bearer " + token;

      if (data.body && ["POST", "PUT", "PATCH"].indexOf(extra.method) !== -1) {
        if (data.body instanceof ref_FormData) {
          extra.body = data.body; //extra.headers["Content-Type"] = "multipart/form-data";

          if (data.body.getHeaders) extra.headers = _objectSpread({}, extra.headers, data.body.getHeaders()); // getHeaders is not standart according to npm package
        } else {
          extra.body = JSON.stringify(data.body);
          extra.headers["Content-Type"] = "application/json";
        }
      }

      var locParam = func[1];
      var queryParam = [];
      Object.keys(data).forEach(function (paramKey) {
        if (paramKey === "body") return;

        if (locParam.indexOf(":" + paramKey) !== -1) {
          locParam = locParam.replace(":" + paramKey, data[paramKey]);
        } else {
          queryParam.push(paramKey + "=" + escape(loc_esc(data[paramKey])));
        }
      });
      locParam = locParam.replace(/\:[^\/]+/g, "false");
      if (queryParam.length) locParam += "?" + queryParam.join("&");
      var url = "https://" + target_host + "/api" + locParam; //  console.warn("FETCH", url, extra);

      return ref_fetch(url, extra).then(function (response) {
        return response.json();
      }).then(function (resp) {
        if (func[0] === "userAuthenticateAnonymous" || func[0] === "userRegister" || func[0] === "userLogout" || func[0] === "userAuthenticate" || func[0] === "userAuthenticatePassword" || func[0] === "userAuthenticateSocial" || func[0] === "userChangeLostPass") {
          if (resp && resp.body && resp.body.user) {
            tunnel.user = resp.body.user;
            a.id = tunnel.user.id;
          }
        }

        return resp;
      }).catch(function (err) {
        console.warn(err);
        throw new Error("Bad fetch on " + url + "\n\n" + JSON.stringify(extra));
      });
    };
  }

  return a;
};

var _default = Aula;
exports.default = _default;