const AXR = (tunnel, cmd, values = {}, body = false) => {
  //check input values here
  if (body) values.body = body;
  return checkInput(cmd, values)
    .then(() => {
      return tunnel.send(cmd, values);
    })
    .then(resp => {
      // check output here
      if (resp.err) {
        resp.msg = cmd[0] + " | " + resp.msg;
        throw new ServerError(resp);
      }
      return resp;
    })
    .then(resp => {
      // UNWRAP body
      // process things outside body
      if (resp.body) return resp.body;
      else return resp;
    });
};

// const checkInput = (dispatch, schemaName, values) => {
const checkInput = () => {
  return new Promise(resolve => {
    resolve(true);
  });
};

class ServerError extends Error {
  constructor(obj = {}) {
    // Pass remaining arguments (including vendor specific ones) to parent constructor
    super(obj.msg);

    // Maintains proper stack trace for where our error was thrown (only available on V8)
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, ServerError);
    }

    this.name = "ServerError";

    // Custom debugging information
    Object.keys(obj).forEach(key => {
      this[key] = obj[key];
    });
  }
}

export default AXR;
