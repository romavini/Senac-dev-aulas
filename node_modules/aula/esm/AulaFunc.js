import AXR from "./AXR";

class AulaFunc {
  constructor(tunnel) {
    this.tunnel = tunnel;
  }
  /**
 * Create Media
 * Create media
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param body
 * @param {object} body.media

 * @returns {Promise<{media: object}>}
 */
  mediaCreate(loc, body) {
    return AXR(
      this.tunnel,
      ["mediaCreate", "/servers/:server_id/media", "POST"],
      loc,
      body
    );
  }

  /**
 * Get Media Key
 * Get media key
 * @async

 * @returns {Promise<{}>}
 */
  mediaKey() {
    return AXR(
      this.tunnel,
      ["mediaKey", "/servers/:server_id/k/:media_id/:format", "GET"],
      {}
    );
  }

  /**
 * Get Media Access
 * Check if user has media access
 * @async

 * @returns {Promise<{}>}
 */
  mediaAccess() {
    return AXR(this.tunnel, ["mediaAccess", "/mediaAccess", "GET"], {});
  }

  /**
 * Get Media
 * Get media object. You don't need to use this function to find the video url and you shouldn't use it for that. It is only for service tasks
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param body
 * @param {string} body.media_id

 * @returns {Promise<{media: object}>}
 */
  mediaGet(loc, body) {
    return AXR(
      this.tunnel,
      ["mediaGet", "/servers/:server_id/media/:media_id", "GET"],
      loc,
      body
    );
  }

  /**
 * Upload Media
 * Upload media
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param body
 * @param {string} body.media_id

 * @returns {Promise<{media: object}>}
 */
  mediaUpload(loc, body) {
    return AXR(
      this.tunnel,
      ["mediaUpload", "/servers/:server_id/media/:media_id/upload", "POST"],
      loc,
      body
    );
  }

  /**
 * Media Analysis
 * Get media analysis
 * @async

 * @returns {Promise<{}>}
 */
  mediaAnalysis() {
    return AXR(
      this.tunnel,
      ["mediaAnalysis", "/servers/:server_id/media/:media_id/analysis", "GET"],
      {}
    );
  }

  /**
 * User Status
 * Update the user status
 * @async
 * @param loc
 * @param {string} loc.session_id
 * @param body
 * @param {boolean} body.afk
 * @param {boolean} body.mobile
 * @param {boolean} body.playing
 * @param {string} body.server_id
 * @param {string} body.collection_id
 * @param {string} body.article_id
 * @param {string} body.atext
 * @param {string} body.ctext
 * @param {string} body.lang

 * @returns {Promise<{ok: boolean}>}
 */
  userStatus(loc, body) {
    return AXR(this.tunnel, ["userStatus", "/my/status", "PUT"], loc, body);
  }

  /**
 * Upload User Avatar
 * Upload user avatar
 * @async

 * @returns {Promise<{}>}
 */
  userUpload() {
    return AXR(this.tunnel, ["userUpload", "/my/upload/:type", "POST"], {});
  }

  /**
 * Delete Media
 * Delete media
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param body
 * @param {string} body.media_id

 * @returns {Promise<{media: object}>}
 */
  mediaDelete(loc, body) {
    return AXR(
      this.tunnel,
      ["mediaDelete", "/servers/:server_id/media/:media_id", "DELETE"],
      loc,
      body
    );
  }

  /**
 * Create Article
 * Create article
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param body
 * @param {object} body.article
 * @param {integer} body.order

 * @returns {Promise<{article: object}>}
 */
  articleCreate(loc, body) {
    return AXR(
      this.tunnel,
      ["articleCreate", "/servers/:server_id/articles", "POST"],
      loc,
      body
    );
  }

  /**
 * Search Articles
 * All Search requests have caching mechanism, don't expect changes to take immediate effect. Search server for articles. :server_id is path parameter, the rest are query parameters. Will fit the requirements of frontend __windowing__
 * @async
 * @param loc
 * @param {string} loc.user_id
 * @param {string} loc.server_id
 * @param {string} loc.owner_user_id
 * @param {string} loc.collection_id
 * @param {string} loc.lang
 * @param {Array} loc.tags
 * @param {string} loc.type
 * @param {string} loc.sort
 * @param {boolean} loc.asc
 * @param {integer} loc.from
 * @param {integer} loc.to

 * @returns {Promise<{total: integer, articles: Array}>}
 */
  articleSearch(loc) {
    return AXR(
      this.tunnel,
      ["articleSearch", "/servers/:server_id/articles/search", "GET"],
      loc
    );
  }

  /**
 * Recommend Article Next
 * Get the recommendations after article
 * @async

 * @returns {Promise<{}>}
 */
  articleRecommendNext() {
    return AXR(
      this.tunnel,
      [
        "articleRecommendNext",
        "/servers/:server_id/articles/:article_id/recommend",
        "GET"
      ],
      {}
    );
  }

  /**
 * Get Article
 * Get article.  If you want `unlisted` - you place the article in a collection which allows @everyone to have VIEW_ARTICLE, but not VIEW_COLLECTION.
 * @async
 * @param loc
 * @param {string} loc.article_id
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param {boolean} loc.overview
 * @param {string} loc.lang_ids

 * @returns {Promise<{article: object}>}
 */
  articleGet(loc) {
    return AXR(
      this.tunnel,
      [
        "articleGet",
        "/servers/:server_id/articles/:article_id/lang/:lang_ids",
        "GET"
      ],
      loc
    );
  }

  /**
 * Patch Article
 * Patch article.
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param {string} loc.article_id
 * @param body
 * @param {object} body.article

 * @returns {Promise<{article: object, article_patch: object}>}
 */
  articlePatch(loc, body) {
    return AXR(
      this.tunnel,
      ["articlePatch", "/servers/:server_id/articles/:article_id", "PATCH"],
      loc,
      body
    );
  }

  /**
 * Modify Article
 * Modify article.
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param {string} loc.article_id
 * @param body
 * @param {object} body.article
 * @param {integer} body.order

 * @returns {Promise<{article: object, article_patch: object}>}
 */
  articleModify(loc, body) {
    return AXR(
      this.tunnel,
      ["articleModify", "/servers/:server_id/articles/:article_id", "PUT"],
      loc,
      body
    );
  }

  /**
 * Render Article
 * Render article.
 * @async

 * @returns {Promise<{}>}
 */
  articleRender() {
    return AXR(
      this.tunnel,
      [
        "articleRender",
        "/servers/:server_id/collections/:collection_id/articles/:article_id/render",
        "POST"
      ],
      {}
    );
  }

  /**
 * Delete Article
 * Delete the article in all collections on this server. Delete all its posts. Requires to be owner
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.article_id

 * @returns {Promise<{article: object}>}
 */
  articleDelete(loc) {
    return AXR(
      this.tunnel,
      ["articleDelete", "/servers/:server_id/articles/:article_id", "DELETE"],
      loc
    );
  }

  /**
 * Rate Article
 * Rate article
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param {string} loc.article_id
 * @param body
 * @param {boolean} body.positive

 * @returns {Promise<{rating: integer}>}
 */
  articleRate(loc, body) {
    return AXR(
      this.tunnel,
      ["articleRate", "/servers/:server_id/articles/:article_id/rate", "POST"],
      loc,
      body
    );
  }

  /**
 * Article Backup
 * Get article backup, which can be imported
 * @async
 * @param loc
 * @param {string} loc.article_id
 * @param {string} loc.server_id
 * @param {string} loc.collection_id

 * @returns {Promise<{article: object}>}
 */
  articleBackup(loc) {
    return AXR(
      this.tunnel,
      ["articleBackup", "/servers/:server_id/articles/backup", "GET"],
      loc
    );
  }

  /**
 * Prune Article
 * Prune article - Remove deleted segments
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param {string} loc.article_id

 * @returns {Promise<{article: object, segments: Array}>}
 */
  articlePrune(loc) {
    return AXR(
      this.tunnel,
      ["articlePrune", "/servers/:server_id/articles/:article_id/prune", "PUT"],
      loc
    );
  }

  /**
 * Order Collection Article
 * Change the order of an article inside a collection
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param {string} loc.article_id
 * @param body
 * @param {string} body.before_article_id

 * @returns {Promise<{ok: boolean}>}
 */
  articleCollectionOrder(loc, body) {
    return AXR(
      this.tunnel,
      [
        "articleCollectionOrder",
        "/servers/:server_id/collections/:collection_id/articles/order/:article_id",
        "POST"
      ],
      loc,
      body
    );
  }

  /**
 * Autocut Article Segment
 * Autocut Article Segment
 * @async

 * @returns {Promise<{}>}
 */
  articleSegmentAutocut() {
    return AXR(
      this.tunnel,
      [
        "articleSegmentAutocut",
        "/servers/:server_id/collections/:collection_id/articles/:article_id/segments/:seg_id/autocut",
        "POST"
      ],
      {}
    );
  }

  /**
 * Create Article Segment
 * Create segment
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param {string} loc.article_id
 * @param {string} loc.seg_id
 * @param body
 * @param {Array} body.segments

 * @returns {Promise<{segments: Array}>}
 */
  articleSegmentCreate(loc, body) {
    return AXR(
      this.tunnel,
      [
        "articleSegmentCreate",
        "/servers/:server_id/articles/:article_id/segments/:seg_id",
        "POST"
      ],
      loc,
      body
    );
  }

  /**
 * Patch Article Segment
 * Patch segment
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param {string} loc.article_id
 * @param {string} loc.seg_id
 * @param body
 * @param {object} body.segment

 * @returns {Promise<{segment: object}>}
 */
  articleSegmentPatch(loc, body) {
    return AXR(
      this.tunnel,
      [
        "articleSegmentPatch",
        "/servers/:server_id/articles/:article_id/segments/:seg_id",
        "PATCH"
      ],
      loc,
      body
    );
  }

  /**
 * Modify Article Segment
 * Modify segment
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param {string} loc.article_id
 * @param {string} loc.seg_id
 * @param body
 * @param {object} body.segment

 * @returns {Promise<{segment: object}>}
 */
  articleSegmentModify(loc, body) {
    return AXR(
      this.tunnel,
      [
        "articleSegmentModify",
        "/servers/:server_id/articles/:article_id/segments/:seg_id",
        "PUT"
      ],
      loc,
      body
    );
  }

  /**
 * Delete Article Segment
 * Delete segment
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param {string} loc.article_id
 * @param {string} loc.seg_id

 * @returns {Promise<{segment: object}>}
 */
  articleSegmentDelete(loc) {
    return AXR(
      this.tunnel,
      [
        "articleSegmentDelete",
        "/servers/:server_id/articles/:article_id/segments/:seg_id",
        "DELETE"
      ],
      loc
    );
  }

  /**
 * Create Post
 * Create post
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param {string} loc.article_id
 * @param {string} loc.parent_id
 * @param body
 * @param {object} body.post

 * @returns {Promise<{post: object}>}
 */
  postCreate(loc, body) {
    return AXR(
      this.tunnel,
      ["postCreate", "/servers/:server_id/posts", "POST"],
      loc,
      body
    );
  }

  /**
 * Report Post
 * Report post
 * @async

 * @returns {Promise<{}>}
 */
  postReport() {
    return AXR(
      this.tunnel,
      ["postReport", "/servers/:server_id/posts/:post_id/report", "POST"],
      {}
    );
  }

  /**
 * Modify Post
 * Modify post
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param {string} loc.article_id
 * @param {string} loc.parent_id
 * @param {string} loc.post_id
 * @param body
 * @param {object} body.post

 * @returns {Promise<{post: object}>}
 */
  postModify(loc, body) {
    return AXR(
      this.tunnel,
      ["postModify", "/servers/:server_id/posts/:post_id", "PUT"],
      loc,
      body
    );
  }

  /**
 * Select Correct Answer
 * Select correct answer
 * @async

 * @returns {Promise<{}>}
 */
  postSelectAnswer() {
    return AXR(
      this.tunnel,
      ["postSelectAnswer", "/servers/:server_id/posts/:post_id/correct", "PUT"],
      {}
    );
  }

  /**
 * Delete Post
 * Delete post
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param {string} loc.article_id
 * @param {string} loc.parent_id
 * @param {string} loc.post_id

 * @returns {Promise<{post: object}>}
 */
  postDelete(loc) {
    return AXR(
      this.tunnel,
      ["postDelete", "/servers/:server_id/posts/:post_id", "DELETE"],
      loc
    );
  }

  /**
 * Rate Post
 * Rate post
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param {string} loc.article_id
 * @param {string} loc.parent_id
 * @param {string} loc.post_id
 * @param body
 * @param {string} body.vote

 * @returns {Promise<{rating: integer}>}
 */
  postRate(loc, body) {
    return AXR(
      this.tunnel,
      ["postRate", "/servers/:server_id/posts/:post_id/rate", "POST"],
      loc,
      body
    );
  }

  /**
 * Get Post
 * Get post
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param {string} loc.article_id
 * @param {string} loc.parent_id
 * @param {string} loc.post_id
 * @param {boolean} loc.overview
 * @param {string} loc.lang

 * @returns {Promise<{post: object}>}
 */
  postGet(loc) {
    return AXR(
      this.tunnel,
      ["postGet", "/servers/:server_id/posts/:post_id/lang/:lang_ids", "GET"],
      loc
    );
  }

  /**
 * Search Posts
 * Get post subposts
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param {string} loc.article_id
 * @param {string} loc.parent_id
 * @param {boolean} loc.overview
 * @param {integer} loc.from
 * @param {integer} loc.to
 * @param {string} loc.sort
 * @param {boolean} loc.asc
 * @param {Array} loc.langs

 * @returns {Promise<{total: integer, posts: Array}>}
 */
  postSearch(loc) {
    return AXR(
      this.tunnel,
      [
        "postSearch",
        "/servers/:server_id/posts/:post_id/subposts/lang/:lang_ids",
        "GET"
      ],
      loc
    );
  }

  /**
 * Create Server
 * Create new server
 * @async
 * @param body
 * @param {object} body.server

 * @returns {Promise<{server: object}>}
 */
  serverCreate(body) {
    return AXR(this.tunnel, ["serverCreate", "/servers", "POST"], {}, body);
  }

  /**
 * Get Server
 * Get server
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {boolean} loc.overview

 * @returns {Promise<{server: object}>}
 */
  serverGet(loc) {
    return AXR(this.tunnel, ["serverGet", "/servers/:server_id", "GET"], loc);
  }

  /**
 * Add Locale
 * Add locale
 * @async

 * @returns {Promise<{}>}
 */
  addLocale() {
    return AXR(
      this.tunnel,
      ["addLocale", "/locales/add/:lang/:ns", "POST"],
      {}
    );
  }

  /**
 * Modify Server
 * Modify server info
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param body
 * @param {object} body.server

 * @returns {Promise<{server: object}>}
 */
  serverModify(loc, body) {
    return AXR(
      this.tunnel,
      ["serverModify", "/servers/:server_id", "PUT"],
      loc,
      body
    );
  }

  /**
 * Delete Server
 * Delete server
 * @async
 * @param loc
 * @param {string} loc.server_id

 * @returns {Promise<{server: object}>}
 */
  serverDelete(loc) {
    return AXR(
      this.tunnel,
      ["serverDelete", "/servers/:server_id", "DELETE"],
      loc
    );
  }

  /**
 * Get Server User Permissions
 * Get user permissions for server
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.user_id
 * @param {Array} loc.collection_ids

 * @returns {Promise<{collections: object}>}
 */
  serverUserPermissionsGet(loc) {
    return AXR(
      this.tunnel,
      [
        "serverUserPermissionsGet",
        "/servers/:server_id/users/:user_id/permissions",
        "GET"
      ],
      loc
    );
  }

  /**
 * Get Server User
 * Get server user info by user id
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.user_id

 * @returns {Promise<{user: object}>}
 */
  serverUserGet(loc) {
    return AXR(
      this.tunnel,
      ["serverUserGet", "/servers/:server_id/users/:user_id", "GET"],
      loc
    );
  }

  /**
 * User Notification Put
 * Set notification settings for given resource id and type
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.type
 * @param {string} loc.id
 * @param body
 * @param {object} body.notifications

 * @returns {Promise<{ok: boolean}>}
 */
  serverUserNotificationPut(loc, body) {
    return AXR(
      this.tunnel,
      [
        "serverUserNotificationPut",
        "/servers/:server_id/notifications/:user_id/:type/:id",
        "PUT"
      ],
      loc,
      body
    );
  }

  /**
 * User Notification List
 * Get all user notifications for given server
 * @async

 * @returns {Promise<{}>}
 */
  serverUserNotificationList() {
    return AXR(
      this.tunnel,
      [
        "serverUserNotificationList",
        "/servers/:server_id/notifications",
        "GET"
      ],
      {}
    );
  }

  /**
 * User Notification Get
 * Get notification settings for given resource id and type
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.type
 * @param {string} loc.id

 * @returns {Promise<{notifications: object}>}
 */
  serverUserNotificationGet(loc) {
    return AXR(
      this.tunnel,
      [
        "serverUserNotificationGet",
        "/servers/:server_id/notifications/:user_id/:type/:id",
        "GET"
      ],
      loc
    );
  }

  /**
 * User Notification Token Set
 * Set FCM notification token for user device_id
 * @async

 * @returns {Promise<{}>}
 */
  userNotificationTokenSet() {
    return AXR(
      this.tunnel,
      ["userNotificationTokenSet", "/my/:device_id/token", "PUT"],
      {}
    );
  }

  /**
 * User Notification Search
 * Search user notifications
 * @async

 * @returns {Promise<{}>}
 */
  userNotificationSearch() {
    return AXR(
      this.tunnel,
      ["userNotificationSearch", "/my/notifications", "GET"],
      {}
    );
  }

  /**
 * Send Notification
 * Send notification
 * @async

 * @returns {Promise<{}>}
 */
  serverNotificationSend() {
    return AXR(
      this.tunnel,
      ["serverNotificationSend", "/servers/:server_id/notification", "POST"],
      {}
    );
  }

  /**
 * Mark Server User Resource
 * Put and remove marks on articles and posts such as seen, watched, etc
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param {string} loc.type
 * @param {string} loc.mark
 * @param {string} loc.id
 * @param {boolean} loc.remove

 * @returns {Promise<{ok: boolean}>}
 */
  serverUserMark(loc) {
    return AXR(
      this.tunnel,
      ["serverUserMark", "/servers/:server_id/mark", "POST"],
      loc
    );
  }

  /**
 * Clear User Touch
 * Clear missed changes indicator
 * @async

 * @returns {Promise<{}>}
 */
  serverUserTouchClear() {
    return AXR(
      this.tunnel,
      [
        "serverUserTouchClear",
        "/servers/:server_id/touch/:type/:id/clear",
        "PUT"
      ],
      {}
    );
  }

  /**
 * Leave User Touch
 * Used for showing missed changes indicators. Joins channel for updates
 * @async

 * @returns {Promise<{}>}
 */
  serverUserTouchLeave() {
    return AXR(
      this.tunnel,
      [
        "serverUserTouchLeave",
        "/servers/:server_id/touch/:type/:id/leave",
        "undefined"
      ],
      {}
    );
  }

  /**
 * Join User Touch
 * Used for showing missed changes indicators. Joins channel for updates
 * @async

 * @returns {Promise<{}>}
 */
  serverUserTouchJoin() {
    return AXR(
      this.tunnel,
      [
        "serverUserTouchJoin",
        "/servers/:server_id/touch/:type/:id/join",
        "undefined"
      ],
      {}
    );
  }

  /**
 * Search Server Users
 * All Search requests have caching mechanism, don't expect changes to take immediate effect.  Search server users. Will fit the requirements of frontend __windowing__
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.role_id
 * @param {string} loc.search
 * @param {string} loc.sort
 * @param {string} loc.display
 * @param {string} loc.collection_id
 * @param {boolean} loc.online
 * @param {integer} loc.from
 * @param {integer} loc.to

 * @returns {Promise<{total: integer, users: Array}>}
 */
  serverUserSearch(loc) {
    return AXR(
      this.tunnel,
      ["serverUserSearch", "/servers/:server_id/users", "GET"],
      loc
    );
  }

  /**
 * Search Server User Bans
 * All Search requests have caching mechanism, don't expect changes to take immediate effect. Get banned user by idx in banned list. For the purposes of frontend __windowing__
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {integer} loc.from
 * @param {integer} loc.to

 * @returns {Promise<{total: integer, users: Array}>}
 */
  serverUserBanSearch(loc) {
    return AXR(
      this.tunnel,
      ["serverUserBanSearch", "/servers/:server_id/bans", "GET"],
      loc
    );
  }

  /**
 * Search Server Invites
 * Search server invites __windowing__
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {integer} loc.from
 * @param {integer} loc.to

 * @returns {Promise<{total: integer, invites: Array}>}
 */
  serverInviteSearch(loc) {
    return AXR(
      this.tunnel,
      ["serverInviteSearch", "/servers/:server_id/invites", "GET"],
      loc
    );
  }

  /**
 * Put Server User Ban
 * Ban user
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.user_id

 * @returns {Promise<{total_bans: integer, user: object}>}
 */
  serverUserBanPut(loc) {
    return AXR(
      this.tunnel,
      ["serverUserBanPut", "/servers/:server_id/bans/:user_id", "PUT"],
      loc
    );
  }

  /**
 * Delete Server User Ban
 * Remove user ban
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.user_id

 * @returns {Promise<{user: object, total_bans: integer}>}
 */
  serverUserBanDelete(loc) {
    return AXR(
      this.tunnel,
      ["serverUserBanDelete", "/servers/:server_id/bans/:user_id", "DELETE"],
      loc
    );
  }

  /**
 * Add Server User
 * User join server
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.user_id
 * @param {string} loc.code

 * @returns {Promise<{user: object}>}
 */
  serverUserAdd(loc) {
    return AXR(
      this.tunnel,
      ["serverUserAdd", "/servers/:server_id/users_add", "PUT"],
      loc
    );
  }

  /**
 * Add Server User Id
 * User join server without invite code if the server allows it
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.user_id
 * @param {string} loc.code

 * @returns {Promise<{user: object}>}
 */
  serverUserAddId(loc) {
    return AXR(
      this.tunnel,
      ["serverUserAddId", "/servers/:server_id/users_add_id", "PUT"],
      loc
    );
  }

  /**
 * Modify Server User
 * Modify server user
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.user_id
 * @param body
 * @param {object} body.user

 * @returns {Promise<{user: object}>}
 */
  serverUserModify(loc, body) {
    return AXR(
      this.tunnel,
      ["serverUserModify", "/servers/:server_id/users/:user_id", "PUT"],
      loc,
      body
    );
  }

  /**
 * Remove Server User
 * User leaves server
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.user_id

 * @returns {Promise<{user: object}>}
 */
  serverUserRemove(loc) {
    return AXR(
      this.tunnel,
      ["serverUserRemove", "/servers/:server_id/users/:user_id", "DELETE"],
      loc
    );
  }

  /**
 * Add Server User Item
 * Add positive or negative amount to user item balance
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.user_id
 * @param {string} loc.item_id

 * @returns {Promise<{ok: boolean, total: string}>}
 */
  serverUserItemAdd(loc) {
    return AXR(
      this.tunnel,
      [
        "serverUserItemAdd",
        "/servers/:server_id/users/:user_id/items/:item_id/add",
        "POST"
      ],
      loc
    );
  }

  /**
 * Add Server User Collection Access
 * add or remove user access to collection  
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.user_id
 * @param {string} loc.collection_id
 * @param {string} loc.expire_days

 * @returns {Promise<{ok: boolean}>}
 */
  serverUserCollectionAccessModify(loc) {
    return AXR(
      this.tunnel,
      [
        "serverUserCollectionAccessModify",
        "/servers/:server_id/users/:user_id/access/:collection_id",
        "POST"
      ],
      loc
    );
  }

  /**
 * Put Server User Role
 * User is assigned to server role
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.user_id
 * @param {string} loc.role_id

 * @returns {Promise<{user: object}>}
 */
  serverUserRolePut(loc) {
    return AXR(
      this.tunnel,
      [
        "serverUserRolePut",
        "/servers/:server_id/users/:user_id/roles/:role_id",
        "PUT"
      ],
      loc
    );
  }

  /**
 * Delete Server User Role
 * User is dismissed from server role
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.user_id
 * @param {string} loc.role_id

 * @returns {Promise<{user: object}>}
 */
  serverUserRoleDelete(loc) {
    return AXR(
      this.tunnel,
      [
        "serverUserRoleDelete",
        "/servers/:server_id/users/:user_id/roles/:role_id",
        "DELETE"
      ],
      loc
    );
  }

  /**
 * Create Server Game
 * Create game
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param body
 * @param {object} body.game

 * @returns {Promise<{game: object}>}
 */
  serverGameCreate(loc, body) {
    return AXR(
      this.tunnel,
      ["serverGameCreate", "/servers/:server_id/games", "POST"],
      loc,
      body
    );
  }

  /**
 * Modify Server Game
 * Modify game
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.game_id
 * @param body
 * @param {object} body.game

 * @returns {Promise<{game: object}>}
 */
  serverGameModify(loc, body) {
    return AXR(
      this.tunnel,
      ["serverGameModify", "/servers/:server_id/games/:game_id", "PUT"],
      loc,
      body
    );
  }

  /**
 * Delete Server Game
 * Delete game
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.game_id

 * @returns {Promise<{game: object}>}
 */
  serverGameDelete(loc) {
    return AXR(
      this.tunnel,
      ["serverGameDelete", "/servers/:server_id/games/:game_id", "DELETE"],
      loc
    );
  }

  /**
 * Game Score
 * Get game score for target id
 * @async

 * @returns {Promise<{}>}
 */
  serverGameScoreGet() {
    return AXR(
      this.tunnel,
      [
        "serverGameScoreGet",
        "/servers/:server_id/game/:game_id/:id/score",
        "GET"
      ],
      {}
    );
  }

  /**
 * Get Server Game Stats
 * Get game stats
 * @async

 * @returns {Promise<{}>}
 */
  serverGameStatsGet() {
    return AXR(
      this.tunnel,
      ["serverGameStatsGet", "/servers/:server_id/games/:game_id/stats", "GET"],
      {}
    );
  }

  /**
 * Get Server Game
 * Get gameinfo
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.game_id

 * @returns {Promise<{game: object}>}
 */
  serverGameGet(loc) {
    return AXR(
      this.tunnel,
      ["serverGameGet", "/servers/:server_id/games/:game_id", "GET"],
      loc
    );
  }

  /**
 * Search Server Games
 * All Search requests have caching mechanism, don't expect changes to take immediate effect. Get gameinfo
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {integer} loc.from
 * @param {integer} loc.to

 * @returns {Promise<{total: integer, games: Array}>}
 */
  serverGameSearch(loc) {
    return AXR(
      this.tunnel,
      ["serverGameSearch", "/servers/:server_id/games", "GET"],
      loc
    );
  }

  /**
 * Create Server Item
 * Create item
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param body
 * @param {object} body.item

 * @returns {Promise<{item: object}>}
 */
  serverItemCreate(loc, body) {
    return AXR(
      this.tunnel,
      ["serverItemCreate", "/servers/:server_id/items", "POST"],
      loc,
      body
    );
  }

  /**
 * Modify Server Item
 * Modify item
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.item_id
 * @param body
 * @param {object} body.item

 * @returns {Promise<{item: object}>}
 */
  serverItemModify(loc, body) {
    return AXR(
      this.tunnel,
      ["serverItemModify", "/servers/:server_id/items/:item_id", "PUT"],
      loc,
      body
    );
  }

  /**
 * Delete Server Item
 * Delete item
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.item_id
 * @param {boolean} loc.force

 * @returns {Promise<{item: object}>}
 */
  serverItemDelete(loc) {
    return AXR(
      this.tunnel,
      ["serverItemDelete", "/servers/:server_id/items/:item_id", "DELETE"],
      loc
    );
  }

  /**
 * Get Server Item
 * Get item info
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.item_id

 * @returns {Promise<{item: object}>}
 */
  serverItemGet(loc) {
    return AXR(
      this.tunnel,
      ["serverItemGet", "/servers/:server_id/items/:item_id", "GET"],
      loc
    );
  }

  /**
 * Search Server Items
 * All Search requests have caching mechanism, don't expect changes to take immediate effect. Get item info
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {integer} loc.from
 * @param {integer} loc.to

 * @returns {Promise<{total: integer, items: Array}>}
 */
  serverItemSearch(loc) {
    return AXR(
      this.tunnel,
      ["serverItemSearch", "/servers/:server_id/items", "GET"],
      loc
    );
  }

  /**
 * Create Server Invite
 * Create invite code for a server
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param body
 * @param {object} body.invite

 * @returns {Promise<{invite: object}>}
 */
  serverInviteCreate(loc, body) {
    return AXR(
      this.tunnel,
      ["serverInviteCreate", "/servers/:server_id/invites", "POST"],
      loc,
      body
    );
  }

  /**
 * Modify Server Invite
 * Modify uses or expires
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.invite_id
 * @param body
 * @param {object} body.invite

 * @returns {Promise<{invite: object}>}
 */
  serverInviteModify(loc, body) {
    return AXR(
      this.tunnel,
      ["serverInviteModify", "/servers/:server_id/invites/:invite_id", "PUT"],
      loc,
      body
    );
  }

  /**
 * Delete Server Invite
 * Delete invite for a server
 * @async
 * @param loc
 * @param {string} loc.invite_id
 * @param {string} loc.server_id

 * @returns {Promise<{invite: object}>}
 */
  serverInviteDelete(loc) {
    return AXR(
      this.tunnel,
      [
        "serverInviteDelete",
        "/servers/:server_id/invites/:invite_id",
        "DELETE"
      ],
      loc
    );
  }

  /**
 * Get Server Invite
 * Get invite code info
 * @async
 * @param loc
 * @param {string} loc.code

 * @returns {Promise<{invite: object}>}
 */
  serverInviteGet(loc) {
    return AXR(
      this.tunnel,
      ["serverInviteGet", "/servers/invites/:code", "GET"],
      loc
    );
  }

  /**
 * Create Server Collection
 * Create server collection
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param body
 * @param {object} body.collection

 * @returns {Promise<{perm: integer, collection: object}>}
 */
  serverCollectionCreate(loc, body) {
    return AXR(
      this.tunnel,
      ["serverCollectionCreate", "/servers/:server_id/collections", "POST"],
      loc,
      body
    );
  }

  /**
 * Create Server Collection Module
 * Create server collection module
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param body
 * @param {object} body.module

 * @returns {Promise<{module: object}>}
 */
  serverModuleCreate(loc, body) {
    return AXR(
      this.tunnel,
      [
        "serverModuleCreate",
        "/servers/:server_id/collections/:collection_id/modules",
        "POST"
      ],
      loc,
      body
    );
  }

  /**
 * Add Server Collection Articles
 * Add articles to a server collection
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param body
 * @param {Array} body.article_ids
 * @param {integer} body.order

 * @returns {Promise<{ok: boolean, added: integer}>}
 */
  serverCollectionArticleAdd(loc, body) {
    return AXR(
      this.tunnel,
      [
        "serverCollectionArticleAdd",
        "/servers/:server_id/collections/:collection_id/articles",
        "POST"
      ],
      loc,
      body
    );
  }

  /**
 * Remove Server Collection Articles
 * Remove articles from a server collection
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param body
 * @param {Array} body.article_ids

 * @returns {Promise<{ok: boolean, removed: integer}>}
 */
  serverCollectionArticleRemove(loc, body) {
    return AXR(
      this.tunnel,
      [
        "serverCollectionArticleRemove",
        "/servers/:server_id/collections/:collection_id/articles",
        "DELETE"
      ],
      loc,
      body
    );
  }

  /**
 * Move Module
 * Reorder modules
 * @async

 * @returns {Promise<{}>}
 */
  serverModuleMove() {
    return AXR(
      this.tunnel,
      [
        "serverModuleMove",
        "/servers/:server_id/collections/:collection_id/modules_move",
        "PUT"
      ],
      {}
    );
  }

  /**
 * Move Collection
 * Move between categories and reorder collections
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param body
 * @param {Array} body.moves

 * @returns {Promise<{ok: boolean}>}
 */
  serverCollectionMove(loc, body) {
    return AXR(
      this.tunnel,
      ["serverCollectionMove", "/servers/:server_id/collections_move", "PUT"],
      loc,
      body
    );
  }

  /**
 * Move Role
 * Change role order
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param body
 * @param {Array} body.moves

 * @returns {Promise<{ok: boolean}>}
 */
  serverRoleMove(loc, body) {
    return AXR(
      this.tunnel,
      ["serverRoleMove", "/servers/:server_id/roles_move", "PUT"],
      loc,
      body
    );
  }

  /**
 * Move Category
 * Reorder categories
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param body
 * @param {Array} body.moves

 * @returns {Promise<{ok: boolean}>}
 */
  serverCategoryMove(loc, body) {
    return AXR(
      this.tunnel,
      ["serverCategoryMove", "/servers/:server_id/categories_move", "PUT"],
      loc,
      body
    );
  }

  /**
 * Modify Server Collection Module
 * Modify server collection module
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param {string} loc.module_id
 * @param body
 * @param {object} body.module

 * @returns {Promise<{modue: object}>}
 */
  serverModuleModify(loc, body) {
    return AXR(
      this.tunnel,
      [
        "serverModuleModify",
        "/servers/:server_id/collections/:collection_id/modules/:module_id",
        "PUT"
      ],
      loc,
      body
    );
  }

  /**
 * Modify Server Collection
 * Modify server collection
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param body
 * @param {object} body.collection

 * @returns {Promise<{collection: object}>}
 */
  serverCollectionModify(loc, body) {
    return AXR(
      this.tunnel,
      [
        "serverCollectionModify",
        "/servers/:server_id/collections/:collection_id",
        "PUT"
      ],
      loc,
      body
    );
  }

  /**
 * Modify Server Category
 * Modify server category
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.category_id
 * @param body
 * @param {object} body.category

 * @returns {Promise<{category: object}>}
 */
  serverCategoryModify(loc, body) {
    return AXR(
      this.tunnel,
      [
        "serverCategoryModify",
        "/servers/:server_id/categories/:collection_id",
        "PUT"
      ],
      loc,
      body
    );
  }

  /**
 * Buy Collection
 * Buy collection
 * @async

 * @returns {Promise<{}>}
 */
  serverCollectionBuy() {
    return AXR(
      this.tunnel,
      [
        "serverCollectionBuy",
        "/servers/:server_id/collections/:collection_id/buy",
        "POST"
      ],
      {}
    );
  }

  /**
 * Get Collection
 * Get server collection info
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param {boolean} loc.overview

 * @returns {Promise<{collection: object}>}
 */
  serverCollectionGet(loc) {
    return AXR(
      this.tunnel,
      [
        "serverCollectionGet",
        "/servers/:server_id/collections/:collection_id",
        "GET"
      ],
      loc
    );
  }

  /**
 * Get Collection Module
 * Get server collection module info
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id

 * @returns {Promise<{module: object}>}
 */
  serverModuleGet(loc) {
    return AXR(
      this.tunnel,
      [
        "serverModuleGet",
        "/servers/:server_id/collections/:collection_id/modules/:module_id",
        "GET"
      ],
      loc
    );
  }

  /**
 * Create Server Category
 * Create server category
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param body
 * @param {object} body.category

 * @returns {Promise<{category: object}>}
 */
  serverCategoryCreate(loc, body) {
    return AXR(
      this.tunnel,
      ["serverCategoryCreate", "/servers/:server_id/categories", "POST"],
      loc,
      body
    );
  }

  /**
 * Get Category
 * Get server category info
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.category_id

 * @returns {Promise<{category: object}>}
 */
  serverCategoryGet(loc) {
    return AXR(
      this.tunnel,
      [
        "serverCategoryGet",
        "/servers/:server_id/categories/:category_id",
        "GET"
      ],
      loc
    );
  }

  /**
 * Delete Server Category
 * Delete server category
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.category_id

 * @returns {Promise<{category: object}>}
 */
  serverCategoryDelete(loc) {
    return AXR(
      this.tunnel,
      [
        "serverCategoryDelete",
        "/servers/:server_id/categories/:collection_id",
        "DELETE"
      ],
      loc
    );
  }

  /**
 * Delete Server Collection
 * Delete server collection
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id

 * @returns {Promise<{collection: object}>}
 */
  serverCollectionDelete(loc) {
    return AXR(
      this.tunnel,
      [
        "serverCollectionDelete",
        "/servers/:server_id/collections/:collection_id",
        "DELETE"
      ],
      loc
    );
  }

  /**
 * Delete Server Collection Module
 * Delete server collection module
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param {string} loc.module_id

 * @returns {Promise<{module: object}>}
 */
  serverModuleDelete(loc) {
    return AXR(
      this.tunnel,
      [
        "serverModuleDelete",
        "/servers/:server_id/collections/:collection_id/modules/:module_id",
        "DELETE"
      ],
      loc
    );
  }

  /**
 * Get Server User Collections
 * Get server collections visible to user
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.user_id

 * @returns {Promise<{collections: object, categories: object, perm: integer, srvuser: object}>}
 */
  serverUserDetailsGet(loc) {
    return AXR(
      this.tunnel,
      [
        "serverUserDetailsGet",
        "/servers/:server_id/user/:user_id/collections",
        "GET"
      ],
      loc
    );
  }

  /**
 * Create Server Role
 * Create server role
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param body
 * @param {object} body.role

 * @returns {Promise<{role: object}>}
 */
  serverRoleCreate(loc, body) {
    return AXR(
      this.tunnel,
      ["serverRoleCreate", "/servers/:server_id/roles", "POST"],
      loc,
      body
    );
  }

  /**
 * Get Server Role
 * Get serfer role
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.role_id

 * @returns {Promise<{role: object}>}
 */
  serverRoleGet(loc) {
    return AXR(
      this.tunnel,
      ["serverRoleGet", "/servers/:server_id/roles/:role_id", "GET"],
      loc
    );
  }

  /**
 * Modify Server Role
 * Modify server role
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.role_id
 * @param body
 * @param {object} body.role

 * @returns {Promise<{role: object}>}
 */
  serverRoleModify(loc, body) {
    return AXR(
      this.tunnel,
      ["serverRoleModify", "/servers/:server_id/roles/:role_id", "PUT"],
      loc,
      body
    );
  }

  /**
 * Delete Server Role
 * Delete server role
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.role_id

 * @returns {Promise<{role: object}>}
 */
  serverRoleDelete(loc) {
    return AXR(
      this.tunnel,
      ["serverRoleDelete", "/servers/:server_id/roles/:role_id", "DELETE"],
      loc
    );
  }

  /**
 * Search Server Tags
 * Search server tags. Used in autocompleting search
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {Array} loc.tags
 * @param {string} loc.search

 * @returns {Promise<{tags: Array}>}
 */
  serverTagsSearch(loc) {
    return AXR(
      this.tunnel,
      ["serverTagsSearch", "/servers/:server_id/tags/:tags/:search", "GET"],
      loc
    );
  }

  /**
 * Register User
 * Register new user
 * @async
 * @param body
 * @param {object} body.user

 * @returns {Promise<{user: object, version: integer}>}
 */
  userRegister(body) {
    return AXR(
      this.tunnel,
      ["userRegister", "/users/register", "POST"],
      {},
      body
    );
  }

  /**
 * Logout User
 * Logout user. If you logout anonymous user, you will get another anonymous user. Logged out = anonymous
 * @async
 * @param body
 * @param {string} body.user_id

 * @returns {Promise<{user: object}>}
 */
  userLogout(body) {
    return AXR(this.tunnel, ["userLogout", "/users/logout", "POST"], {}, body);
  }

  /**
 * Get User Servers
 * Get user servers
 * @async
 * @param loc
 * @param {string} loc.user_id

 * @returns {Promise<{servers: object}>}
 */
  userServersGet(loc) {
    return AXR(
      this.tunnel,
      ["userServersGet", "/users/:user_id/servers", "GET"],
      loc
    );
  }

  /**
 * Authenticate Anonymous User
 * Authenticate anonymous users
 * @async
 * @param body

 * @returns {Promise<{user: object, version: integer}>}
 */
  userAuthenticateAnonymous(body) {
    return AXR(
      this.tunnel,
      ["userAuthenticateAnonymous", "/users/authenticate/anonymous", "POST"],
      {},
      body
    );
  }

  /**
 * Authenticate User Token
 * Authenticate by providing token
 * @async
 * @param body
 * @param {string} body.token

 * @returns {Promise<{user: object, version: integer}>}
 */
  userAuthenticate(body) {
    return AXR(
      this.tunnel,
      ["userAuthenticate", "/users/authenticate/token", "POST"],
      {},
      body
    );
  }

  /**
 * Authenticate User Password
 * Authenticate user with password
 * @async
 * @param body
 * @param {string} body.email
 * @param {string} body.password
 * @param {object} body.social

 * @returns {Promise<{user: object, version: integer}>}
 */
  userAuthenticatePassword(body) {
    return AXR(
      this.tunnel,
      ["userAuthenticatePassword", "/users/authenticate/password", "POST"],
      {},
      body
    );
  }

  /**
 * Authenticate User Social
 * Register or Login new user with social network credentials
 * @async
 * @param body
 * @param {object} body.social

 * @returns {Promise<{user: object, version: integer}>}
 */
  userAuthenticateSocial(body) {
    return AXR(
      this.tunnel,
      ["userAuthenticateSocial", "/users/authenticate/social", "POST"],
      {},
      body
    );
  }

  /**
 * Modify User Preferences
 * Save user preferences
 * @async
 * @param loc
 * @param {string} loc.user_id
 * @param body
 * @param {object} body.preferences

 * @returns {Promise<{preferences: object}>}
 */
  userPreferencesModify(loc, body) {
    return AXR(
      this.tunnel,
      ["userPreferencesModify", "/users/:user_id/preferences", "PUT"],
      loc,
      body
    );
  }

  /**
 * Get User Preferences
 * Leave user preferences
 * @async
 * @param loc
 * @param {string} loc.user_id

 * @returns {Promise<{preferences: object}>}
 */
  userPreferencesGet(loc) {
    return AXR(
      this.tunnel,
      ["userPreferencesGet", "/users/:user_id/preferences", "GET"],
      loc
    );
  }

  /**
 * Modify User
 * Change your own user properties
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.user_id
 * @param body
 * @param {object} body.user

 * @returns {Promise<{user: object}>}
 */
  userModify(loc, body) {
    return AXR(
      this.tunnel,
      ["userModify", "/users/:user_id", "PUT"],
      loc,
      body
    );
  }

  /**
 * Get User
 * Get map of users. `PUBLIC`
 * @async
 * @param loc
 * @param {Array} loc.user_ids

 * @returns {Promise<{users: object}>}
 */
  userGet(loc) {
    return AXR(this.tunnel, ["userGet", "/users", "GET"], loc);
  }

  /**
 * Search Server Admin Log
 * All Search requests have caching mechanism, don't expect changes to take immediate effect. Search the administrative events logs
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {integer} loc.from
 * @param {integer} loc.to

 * @returns {Promise<{total: integer, events: Array}>}
 */
  serverAdminLogSearch(loc) {
    return AXR(
      this.tunnel,
      ["serverAdminLogSearch", "/servers/:server_id/alog", "GET"],
      loc
    );
  }

  /**
 * Introduce User Email
 * Introduce user email and find out if they are already registred. `PUBLIC`
 * @async
 * @param body
 * @param {string} body.email

 * @returns {Promise<{registered: boolean, user: object}>}
 */
  userIntroduction(body) {
    return AXR(
      this.tunnel,
      ["userIntroduction", "/users/introduction", "POST"],
      {},
      body
    );
  }

  /**
 * Claim Lost Pass
 * Claim lost password and the server will attempt to send email with code
 * @async

 * @returns {Promise<{}>}
 */
  userClaimLostPass() {
    return AXR(
      this.tunnel,
      ["userClaimLostPass", "/users/claim_lost_pass", "POST"],
      {}
    );
  }

  /**
 * Verify User Lost Pass Code
 * Check if lost password code is valid
 * @async
 * @param body
 * @param {string} body.email
 * @param {string} body.code

 * @returns {Promise<{ok: boolean}>}
 */
  userVerifyLostPassCode(body) {
    return AXR(
      this.tunnel,
      ["userVerifyLostPassCode", "/users/verify_lost_pass_code", "POST"],
      {},
      body
    );
  }

  /**
 * Change User Lost Pass
 * Change user lost password
 * @async
 * @param body
 * @param {string} body.email
 * @param {string} body.code
 * @param {string} body.password

 * @returns {Promise<{user: object, version: integer}>}
 */
  userChangeLostPass(body) {
    return AXR(
      this.tunnel,
      ["userChangeLostPass", "/users/lost_pass_new_pass", "POST"],
      {},
      body
    );
  }

  /**
 * Get Changelog
 * Get changelog for a user
 * @async
 * @param body

 * @returns {Promise<{changelog: Array}>}
 */
  userChangelogGet(body) {
    return AXR(
      this.tunnel,
      ["userChangelogGet", "/users/:user_id/changelog", "GET"],
      {},
      body
    );
  }

  /**
 * Join Server Channel
 * Join server update channel
 * @async
 * @param loc
 * @param {string} loc.server_id

 * @returns {Promise<{ok: boolean}>}
 */
  serverChannelJoin(loc) {
    return AXR(
      this.tunnel,
      ["serverChannelJoin", "undefined", "undefined"],
      loc
    );
  }

  /**
 * Leave Server Channel
 * Leave server update channel
 * @async
 * @param loc
 * @param {string} loc.server_id

 * @returns {Promise<{ok: boolean}>}
 */
  serverChannelLeave(loc) {
    return AXR(
      this.tunnel,
      ["serverChannelLeave", "undefined", "undefined"],
      loc
    );
  }

  /**
 * Join User Channel
 * Join user update channel
 * @async
 * @param loc
 * @param {Array} loc.ids

 * @returns {Promise<{ok: boolean}>}
 */
  userChannelJoin(loc) {
    return AXR(this.tunnel, ["userChannelJoin", "undefined", "undefined"], loc);
  }

  /**
 * Leave User Channel
 * Leave user update channel
 * @async
 * @param loc
 * @param {string} loc.user_id

 * @returns {Promise<{ok: boolean}>}
 */
  userChannelLeave(loc) {
    return AXR(
      this.tunnel,
      ["userChannelLeave", "undefined", "undefined"],
      loc
    );
  }

  /**
 * Join Post Thread Channel
 * Join thread update channel
 * @async
 * @param loc
 * @param {string} loc.parent_id
 * @param {string} loc.post_id

 * @returns {Promise<{ok: boolean}>}
 */
  postChannelJoin(loc) {
    return AXR(this.tunnel, ["postChannelJoin", "undefined", "undefined"], loc);
  }

  /**
 * Leave Post Thread Channel
 * Leave thread update channel
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.parent_id

 * @returns {Promise<{ok: boolean}>}
 */
  postChannelLeave(loc) {
    return AXR(
      this.tunnel,
      ["postChannelLeave", "undefined", "undefined"],
      loc
    );
  }

  /**
 * Join Article Channel
 * Join article updates channel
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.article_id

 * @returns {Promise<{ok: boolean}>}
 */
  articleChannelJoin(loc) {
    return AXR(
      this.tunnel,
      ["articleChannelJoin", "undefined", "undefined"],
      loc
    );
  }

  /**
 * Leave Article Channel
 * Leave article updates channel
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.article_id

 * @returns {Promise<{ok: boolean}>}
 */
  articleChannelLeave(loc) {
    return AXR(
      this.tunnel,
      ["articleChannelLeave", "undefined", "undefined"],
      loc
    );
  }

  /**
 * Join Collection Channel
 * Join collection updates 
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id

 * @returns {Promise<{ok: boolean}>}
 */
  collectionChannelJoin(loc) {
    return AXR(
      this.tunnel,
      ["collectionChannelJoin", "undefined", "undefined"],
      loc
    );
  }

  /**
 * Leave Collection Channel
 * Leave collection updates
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.article_id

 * @returns {Promise<{ok: boolean}>}
 */
  collectionChannelLeave(loc) {
    return AXR(
      this.tunnel,
      ["collectionChannelLeave", "undefined", "undefined"],
      loc
    );
  }

  /**
 * Rebuild Article
 * Rebuild article in database. Fixes the article if app development changed the database
 * @async
 * @param loc
 * @param {string} loc.server_id
 * @param {string} loc.collection_id
 * @param {string} loc.article_id

 * @returns {Promise<{article: object}>}
 */
  articleRebuild(loc) {
    return AXR(
      this.tunnel,
      [
        "articleRebuild",
        "/servers/:server_id/articles/:article_id/rebuild",
        "PUT"
      ],
      loc
    );
  }

  /**
 * Dump Server
 * Dump server  database
 * @async
 * @param loc
 * @param {string} loc.server_id

 * @returns {Promise<{server: object}>}
 */
  serverDump(loc) {
    return AXR(
      this.tunnel,
      ["serverDump", "/servers/:server_id/dump", "GET"],
      loc
    );
  }

  /**
 * Wipe Everything
 * Restart the database from scratch
 * @async

 * @returns {Promise<{}>}
 */
  wipeEverything() {
    return AXR(this.tunnel, ["wipeEverything", "undefined", "undefined"], {});
  }

  /**
 * Clean Server Tags
 * Clean server tags
 * @async

 * @returns {Promise<{}>}
 */
  serverTagsCleanup() {
    return AXR(
      this.tunnel,
      ["serverTagsCleanup", "undefined", "undefined"],
      {}
    );
  }

  /**
 * Soft Restart
 * Restart server
 * @async

 * @returns {Promise<{}>}
 */
  serverSoftRestart() {
    return AXR(
      this.tunnel,
      ["serverSoftRestart", "undefined", "undefined"],
      {}
    );
  }

  /**
 * Wipe Demo Data
 * Remove demo servers and users which are created with tests
 * @async

 * @returns {Promise<{}>}
 */
  demoWipe() {
    return AXR(this.tunnel, ["demoWipe", "undefined", "undefined"], {});
  }

  /**
 * Cluster Info
 * Get info from all nodes
 * @async

 * @returns {Promise<{}>}
 */
  clusterInfo() {
    return AXR(this.tunnel, ["clusterInfo", "undefined", "undefined"], {});
  }

  /**
 * Cleanup Deleted
 * Cleanup deleted servers in case they failed to fully delete
 * @async

 * @returns {Promise<{}>}
 */
  cleanupDeleted() {
    return AXR(this.tunnel, ["cleanupDeleted", "undefined", "undefined"], {});
  }
}
export default AulaFunc;
